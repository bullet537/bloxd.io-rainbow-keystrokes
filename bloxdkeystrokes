// ==UserScript==
// @name Keystrokes for bloxd
// @namespace your-namespace
// @version 1.0
// @description keystroke
// @description ioekvnejnvoierg
// @match https://*.bloxd.io/*
// @grant GM_addStyle
// ==/UserScript==

(function () {
    var container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.bottom = '100px';
    container.style.left = '20px';
    container.style.backgroundColor = 'transparent';
    container.style.color = 'white';
    container.style.padding = '10px';
    container.style.fontFamily = 'Arial';
    container.style.fontSize = '13.33px'; // Reduced font size for other texts (1.5x smaller)
    container.style.zIndex = '9999';
    container.style.cursor = 'move'; // Cursor change to indicate draggable

    var row1 = document.createElement('div');
    row1.style.display = 'flex';
    row1.style.justifyContent = 'center';

    var upKey = createKeyElement('W');

    var row2 = document.createElement('div');
    row2.style.display = 'flex';
    row2.style.justifyContent = 'center';

    var leftKey = createKeyElement('A');
    var sprintKey = createKeyElement('S');
    var rightKey = createKeyElement('D');

    var row3 = document.createElement('div');
    row3.style.display = 'flex';
    row3.style.justifyContent = 'center';

    var shiftKey = createKeyElement('Shift');
    var spaceKey = createKeyElement(' ');

    var row4 = document.createElement('div');
    row4.style.display = 'flex';
    row4.style.justifyContent = 'center';

    var lmbKey = createKeyElement('LMB', '0'); // Initial CPS value
    var rmbKey = createKeyElement('RMB', '0'); // Initial CPS value

    row1.appendChild(upKey);
    row2.appendChild(leftKey);
    row2.appendChild(sprintKey);
    row2.appendChild(rightKey);
    row3.appendChild(shiftKey);
    row3.appendChild(spaceKey);
    row4.appendChild(lmbKey);
    row4.appendChild(rmbKey);
    container.appendChild(row1);
    container.appendChild(row2);
    container.appendChild(row3);
    container.appendChild(row4);

    document.body.appendChild(container);

    var clickTimes = [];

    document.addEventListener('keydown', function (event) {
        highlightKey(event.key, 'white');
    });

    document.addEventListener('keyup', function (event) {
        highlightKey(event.key, 'transparent');
    });

    document.addEventListener('mousedown', function (event) {
        if (event.button === 0) {
            lmbKey.style.backgroundColor = 'white';
            countClick(true); // Left click
        } else if (event.button === 2) {
            rmbKey.style.backgroundColor = 'white';
            countClick(false); // Right click
        }
    });

    document.addEventListener('mouseup', function (event) {
        if (event.button === 0) {
            lmbKey.style.backgroundColor = 'transparent';
        } else if (event.button === 2) {
            rmbKey.style.backgroundColor = 'transparent';
        }
    });

    function createKeyElement(keyText, cpsValue) {
        var keyElement = document.createElement('div');
        keyElement.style.backgroundColor = 'transparent';
        keyElement.style.color = 'white';
        keyElement.style.padding = '12px'; // Reduced padding (1.5x smaller)
        keyElement.style.margin = '3.33px'; // Reduced margin (1.5x smaller)
        keyElement.style.border = '1.33px solid white'; // Reduced border width (1.5x smaller)
        keyElement.style.borderRadius = '8px'; // Reduced border-radius (1.5x smaller)
        keyElement.style.fontFamily = 'Arial';
        keyElement.style.fontSize = '24px'; // Reduced font size for other texts (1.5x smaller)
        keyElement.style.display = 'flex';
        keyElement.style.flexDirection = 'column';
        keyElement.style.alignItems = 'center';
        keyElement.className = 'rainbowText';

        var keyTextElement = document.createElement('div');
        keyTextElement.textContent = keyText;

        var cpsElement = document.createElement('div');
        cpsElement.textContent = cpsValue;
        cpsElement.style.fontSize = '18.67px'; // Slightly larger font size for CPS (1.5x smaller)

        keyElement.appendChild(keyTextElement);
        keyElement.appendChild(cpsElement);
        return keyElement;
    }

    function highlightKey(key, color) {
        key = key.toLowerCase();
        switch (key) {
            case 'w':
                upKey.style.backgroundColor = color;
                break;
            case 'a':
                leftKey.style.backgroundColor = color;
                break;
            case 's':
                sprintKey.style.backgroundColor = color;
                break;
            case 'd':
                rightKey.style.backgroundColor = color;
                break;
            case 'shift':
                shiftKey.style.backgroundColor = color;
                break;
            case ' ':
                spaceKey.style.backgroundColor = color;
                break;
            default:
                break;
        }
    }

    function countClick(isLeftClick) {
        var currentTime = new Date().getTime();
        clickTimes.push({ time: currentTime, isLeft: isLeftClick });
        updateCPS();
    }

    function updateCPS() {
        var currentTime = new Date().getTime();
        var oneSecondAgo = currentTime - 1000;
        var leftClicks = 0;
        var rightClicks = 0;

        for (var i = clickTimes.length - 1; i >= 0; i--) {
            if (clickTimes[i].time >= oneSecondAgo) {
                if (clickTimes[i].isLeft) {
                    leftClicks++;
                } else {
                    rightClicks++;
                }
            } else {
                break;
            }
        }

        lmbKey.lastChild.textContent = leftClicks; // Update left CPS value
        rmbKey.lastChild.textContent = rightClicks; // Update right CPS value
    }

    function resetClickCount() {
        clickTimes = [];
        updateCPS();
    }

    // Make the container draggable
    container.onmousedown = function (event) {
        event.preventDefault();

        let shiftX = event.clientX - container.getBoundingClientRect().left;
        let shiftY = event.clientY - container.getBoundingClientRect().top;

        document.body.append(container);

        function moveAt(pageX, pageY) {
            container.style.left = pageX - shiftX + 'px';
            container.style.top = pageY - shiftY + 'px';
        }

        function onMouseMove(event) {
            moveAt(event.pageX, event.pageY);
        }

        document.addEventListener('mousemove', onMouseMove);

        container.onmouseup = function () {
            document.removeEventListener('mousemove', onMouseMove);
            container.onmouseup = null;
        };
    };

    container.ondragstart = function () {
        return false;
    };
})();

// Add animation for rainbow text
GM_addStyle(`
    @keyframes rainbowText {
        0%, 100% { color: red; }
        16.66% { color: orange; }
        33.33% { color: yellow; }
        50% { color: green; }
        66.66% { color: blue; }
        83.33% { color: purple; }
    }
    .rainbowText {
        animation: rainbowText 4s linear infinite;
    }
`);
